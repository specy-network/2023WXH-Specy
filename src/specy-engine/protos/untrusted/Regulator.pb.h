// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Regulator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Regulator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Regulator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Regulator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Regulator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Regulator_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Regulator_2eproto_metadata_getter(int index);
namespace request_proto {
class TaskRequest;
struct TaskRequestDefaultTypeInternal;
extern TaskRequestDefaultTypeInternal _TaskRequest_default_instance_;
class TaskResponse;
struct TaskResponseDefaultTypeInternal;
extern TaskResponseDefaultTypeInternal _TaskResponse_default_instance_;
}  // namespace request_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::request_proto::TaskRequest* Arena::CreateMaybeMessage<::request_proto::TaskRequest>(Arena*);
template<> ::request_proto::TaskResponse* Arena::CreateMaybeMessage<::request_proto::TaskResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace request_proto {

// ===================================================================

class TaskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.TaskRequest) */ {
 public:
  inline TaskRequest() : TaskRequest(nullptr) {}
  virtual ~TaskRequest();
  explicit constexpr TaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskRequest(const TaskRequest& from);
  TaskRequest(TaskRequest&& from) noexcept
    : TaskRequest() {
    *this = ::std::move(from);
  }

  inline TaskRequest& operator=(const TaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskRequest& operator=(TaskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskRequest* internal_default_instance() {
    return reinterpret_cast<const TaskRequest*>(
               &_TaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskRequest& a, TaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskRequest* New() const final {
    return CreateMaybeMessage<TaskRequest>(nullptr);
  }

  TaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskRequest& from);
  void MergeFrom(const TaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.TaskRequest";
  }
  protected:
  explicit TaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Regulator_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskhashFieldNumber = 1,
    kRuleFileFieldNumber = 2,
    kInputDataFieldNumber = 3,
  };
  // bytes taskhash = 1;
  void clear_taskhash();
  const std::string& taskhash() const;
  void set_taskhash(const std::string& value);
  void set_taskhash(std::string&& value);
  void set_taskhash(const char* value);
  void set_taskhash(const void* value, size_t size);
  std::string* mutable_taskhash();
  std::string* release_taskhash();
  void set_allocated_taskhash(std::string* taskhash);
  private:
  const std::string& _internal_taskhash() const;
  void _internal_set_taskhash(const std::string& value);
  std::string* _internal_mutable_taskhash();
  public:

  // string rule_file = 2;
  void clear_rule_file();
  const std::string& rule_file() const;
  void set_rule_file(const std::string& value);
  void set_rule_file(std::string&& value);
  void set_rule_file(const char* value);
  void set_rule_file(const char* value, size_t size);
  std::string* mutable_rule_file();
  std::string* release_rule_file();
  void set_allocated_rule_file(std::string* rule_file);
  private:
  const std::string& _internal_rule_file() const;
  void _internal_set_rule_file(const std::string& value);
  std::string* _internal_mutable_rule_file();
  public:

  // string input_data = 3;
  void clear_input_data();
  const std::string& input_data() const;
  void set_input_data(const std::string& value);
  void set_input_data(std::string&& value);
  void set_input_data(const char* value);
  void set_input_data(const char* value, size_t size);
  std::string* mutable_input_data();
  std::string* release_input_data();
  void set_allocated_input_data(std::string* input_data);
  private:
  const std::string& _internal_input_data() const;
  void _internal_set_input_data(const std::string& value);
  std::string* _internal_mutable_input_data();
  public:

  // @@protoc_insertion_point(class_scope:request_proto.TaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Regulator_2eproto;
};
// -------------------------------------------------------------------

class TaskResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_proto.TaskResponse) */ {
 public:
  inline TaskResponse() : TaskResponse(nullptr) {}
  virtual ~TaskResponse();
  explicit constexpr TaskResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskResponse(const TaskResponse& from);
  TaskResponse(TaskResponse&& from) noexcept
    : TaskResponse() {
    *this = ::std::move(from);
  }

  inline TaskResponse& operator=(const TaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskResponse& operator=(TaskResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskResponse* internal_default_instance() {
    return reinterpret_cast<const TaskResponse*>(
               &_TaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskResponse& a, TaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskResponse* New() const final {
    return CreateMaybeMessage<TaskResponse>(nullptr);
  }

  TaskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskResponse& from);
  void MergeFrom(const TaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_proto.TaskResponse";
  }
  protected:
  explicit TaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Regulator_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskhashFieldNumber = 1,
    kErrorInfoFieldNumber = 3,
    kOutputDataFieldNumber = 4,
    kCproofFieldNumber = 5,
    kSignatureFieldNumber = 6,
    kStatusFieldNumber = 2,
  };
  // bytes taskhash = 1;
  void clear_taskhash();
  const std::string& taskhash() const;
  void set_taskhash(const std::string& value);
  void set_taskhash(std::string&& value);
  void set_taskhash(const char* value);
  void set_taskhash(const void* value, size_t size);
  std::string* mutable_taskhash();
  std::string* release_taskhash();
  void set_allocated_taskhash(std::string* taskhash);
  private:
  const std::string& _internal_taskhash() const;
  void _internal_set_taskhash(const std::string& value);
  std::string* _internal_mutable_taskhash();
  public:

  // string error_info = 3;
  void clear_error_info();
  const std::string& error_info() const;
  void set_error_info(const std::string& value);
  void set_error_info(std::string&& value);
  void set_error_info(const char* value);
  void set_error_info(const char* value, size_t size);
  std::string* mutable_error_info();
  std::string* release_error_info();
  void set_allocated_error_info(std::string* error_info);
  private:
  const std::string& _internal_error_info() const;
  void _internal_set_error_info(const std::string& value);
  std::string* _internal_mutable_error_info();
  public:

  // string output_data = 4;
  void clear_output_data();
  const std::string& output_data() const;
  void set_output_data(const std::string& value);
  void set_output_data(std::string&& value);
  void set_output_data(const char* value);
  void set_output_data(const char* value, size_t size);
  std::string* mutable_output_data();
  std::string* release_output_data();
  void set_allocated_output_data(std::string* output_data);
  private:
  const std::string& _internal_output_data() const;
  void _internal_set_output_data(const std::string& value);
  std::string* _internal_mutable_output_data();
  public:

  // string cproof = 5;
  void clear_cproof();
  const std::string& cproof() const;
  void set_cproof(const std::string& value);
  void set_cproof(std::string&& value);
  void set_cproof(const char* value);
  void set_cproof(const char* value, size_t size);
  std::string* mutable_cproof();
  std::string* release_cproof();
  void set_allocated_cproof(std::string* cproof);
  private:
  const std::string& _internal_cproof() const;
  void _internal_set_cproof(const std::string& value);
  std::string* _internal_mutable_cproof();
  public:

  // bytes signature = 6;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bool status = 2;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:request_proto.TaskResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cproof_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Regulator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskRequest

// bytes taskhash = 1;
inline void TaskRequest::clear_taskhash() {
  taskhash_.ClearToEmpty();
}
inline const std::string& TaskRequest::taskhash() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskRequest.taskhash)
  return _internal_taskhash();
}
inline void TaskRequest::set_taskhash(const std::string& value) {
  _internal_set_taskhash(value);
  // @@protoc_insertion_point(field_set:request_proto.TaskRequest.taskhash)
}
inline std::string* TaskRequest::mutable_taskhash() {
  // @@protoc_insertion_point(field_mutable:request_proto.TaskRequest.taskhash)
  return _internal_mutable_taskhash();
}
inline const std::string& TaskRequest::_internal_taskhash() const {
  return taskhash_.Get();
}
inline void TaskRequest::_internal_set_taskhash(const std::string& value) {
  
  taskhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskRequest::set_taskhash(std::string&& value) {
  
  taskhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TaskRequest.taskhash)
}
inline void TaskRequest::set_taskhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TaskRequest.taskhash)
}
inline void TaskRequest::set_taskhash(const void* value,
    size_t size) {
  
  taskhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TaskRequest.taskhash)
}
inline std::string* TaskRequest::_internal_mutable_taskhash() {
  
  return taskhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskRequest::release_taskhash() {
  // @@protoc_insertion_point(field_release:request_proto.TaskRequest.taskhash)
  return taskhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskRequest::set_allocated_taskhash(std::string* taskhash) {
  if (taskhash != nullptr) {
    
  } else {
    
  }
  taskhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskRequest.taskhash)
}

// string rule_file = 2;
inline void TaskRequest::clear_rule_file() {
  rule_file_.ClearToEmpty();
}
inline const std::string& TaskRequest::rule_file() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskRequest.rule_file)
  return _internal_rule_file();
}
inline void TaskRequest::set_rule_file(const std::string& value) {
  _internal_set_rule_file(value);
  // @@protoc_insertion_point(field_set:request_proto.TaskRequest.rule_file)
}
inline std::string* TaskRequest::mutable_rule_file() {
  // @@protoc_insertion_point(field_mutable:request_proto.TaskRequest.rule_file)
  return _internal_mutable_rule_file();
}
inline const std::string& TaskRequest::_internal_rule_file() const {
  return rule_file_.Get();
}
inline void TaskRequest::_internal_set_rule_file(const std::string& value) {
  
  rule_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskRequest::set_rule_file(std::string&& value) {
  
  rule_file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TaskRequest.rule_file)
}
inline void TaskRequest::set_rule_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rule_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TaskRequest.rule_file)
}
inline void TaskRequest::set_rule_file(const char* value,
    size_t size) {
  
  rule_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TaskRequest.rule_file)
}
inline std::string* TaskRequest::_internal_mutable_rule_file() {
  
  return rule_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskRequest::release_rule_file() {
  // @@protoc_insertion_point(field_release:request_proto.TaskRequest.rule_file)
  return rule_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskRequest::set_allocated_rule_file(std::string* rule_file) {
  if (rule_file != nullptr) {
    
  } else {
    
  }
  rule_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskRequest.rule_file)
}

// string input_data = 3;
inline void TaskRequest::clear_input_data() {
  input_data_.ClearToEmpty();
}
inline const std::string& TaskRequest::input_data() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskRequest.input_data)
  return _internal_input_data();
}
inline void TaskRequest::set_input_data(const std::string& value) {
  _internal_set_input_data(value);
  // @@protoc_insertion_point(field_set:request_proto.TaskRequest.input_data)
}
inline std::string* TaskRequest::mutable_input_data() {
  // @@protoc_insertion_point(field_mutable:request_proto.TaskRequest.input_data)
  return _internal_mutable_input_data();
}
inline const std::string& TaskRequest::_internal_input_data() const {
  return input_data_.Get();
}
inline void TaskRequest::_internal_set_input_data(const std::string& value) {
  
  input_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskRequest::set_input_data(std::string&& value) {
  
  input_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TaskRequest.input_data)
}
inline void TaskRequest::set_input_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TaskRequest.input_data)
}
inline void TaskRequest::set_input_data(const char* value,
    size_t size) {
  
  input_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TaskRequest.input_data)
}
inline std::string* TaskRequest::_internal_mutable_input_data() {
  
  return input_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskRequest::release_input_data() {
  // @@protoc_insertion_point(field_release:request_proto.TaskRequest.input_data)
  return input_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskRequest::set_allocated_input_data(std::string* input_data) {
  if (input_data != nullptr) {
    
  } else {
    
  }
  input_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskRequest.input_data)
}

// -------------------------------------------------------------------

// TaskResponse

// bytes taskhash = 1;
inline void TaskResponse::clear_taskhash() {
  taskhash_.ClearToEmpty();
}
inline const std::string& TaskResponse::taskhash() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskResponse.taskhash)
  return _internal_taskhash();
}
inline void TaskResponse::set_taskhash(const std::string& value) {
  _internal_set_taskhash(value);
  // @@protoc_insertion_point(field_set:request_proto.TaskResponse.taskhash)
}
inline std::string* TaskResponse::mutable_taskhash() {
  // @@protoc_insertion_point(field_mutable:request_proto.TaskResponse.taskhash)
  return _internal_mutable_taskhash();
}
inline const std::string& TaskResponse::_internal_taskhash() const {
  return taskhash_.Get();
}
inline void TaskResponse::_internal_set_taskhash(const std::string& value) {
  
  taskhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskResponse::set_taskhash(std::string&& value) {
  
  taskhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TaskResponse.taskhash)
}
inline void TaskResponse::set_taskhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TaskResponse.taskhash)
}
inline void TaskResponse::set_taskhash(const void* value,
    size_t size) {
  
  taskhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TaskResponse.taskhash)
}
inline std::string* TaskResponse::_internal_mutable_taskhash() {
  
  return taskhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskResponse::release_taskhash() {
  // @@protoc_insertion_point(field_release:request_proto.TaskResponse.taskhash)
  return taskhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskResponse::set_allocated_taskhash(std::string* taskhash) {
  if (taskhash != nullptr) {
    
  } else {
    
  }
  taskhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskResponse.taskhash)
}

// bool status = 2;
inline void TaskResponse::clear_status() {
  status_ = false;
}
inline bool TaskResponse::_internal_status() const {
  return status_;
}
inline bool TaskResponse::status() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskResponse.status)
  return _internal_status();
}
inline void TaskResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void TaskResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:request_proto.TaskResponse.status)
}

// string error_info = 3;
inline void TaskResponse::clear_error_info() {
  error_info_.ClearToEmpty();
}
inline const std::string& TaskResponse::error_info() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskResponse.error_info)
  return _internal_error_info();
}
inline void TaskResponse::set_error_info(const std::string& value) {
  _internal_set_error_info(value);
  // @@protoc_insertion_point(field_set:request_proto.TaskResponse.error_info)
}
inline std::string* TaskResponse::mutable_error_info() {
  // @@protoc_insertion_point(field_mutable:request_proto.TaskResponse.error_info)
  return _internal_mutable_error_info();
}
inline const std::string& TaskResponse::_internal_error_info() const {
  return error_info_.Get();
}
inline void TaskResponse::_internal_set_error_info(const std::string& value) {
  
  error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskResponse::set_error_info(std::string&& value) {
  
  error_info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TaskResponse.error_info)
}
inline void TaskResponse::set_error_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TaskResponse.error_info)
}
inline void TaskResponse::set_error_info(const char* value,
    size_t size) {
  
  error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TaskResponse.error_info)
}
inline std::string* TaskResponse::_internal_mutable_error_info() {
  
  return error_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskResponse::release_error_info() {
  // @@protoc_insertion_point(field_release:request_proto.TaskResponse.error_info)
  return error_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskResponse::set_allocated_error_info(std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  error_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskResponse.error_info)
}

// string output_data = 4;
inline void TaskResponse::clear_output_data() {
  output_data_.ClearToEmpty();
}
inline const std::string& TaskResponse::output_data() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskResponse.output_data)
  return _internal_output_data();
}
inline void TaskResponse::set_output_data(const std::string& value) {
  _internal_set_output_data(value);
  // @@protoc_insertion_point(field_set:request_proto.TaskResponse.output_data)
}
inline std::string* TaskResponse::mutable_output_data() {
  // @@protoc_insertion_point(field_mutable:request_proto.TaskResponse.output_data)
  return _internal_mutable_output_data();
}
inline const std::string& TaskResponse::_internal_output_data() const {
  return output_data_.Get();
}
inline void TaskResponse::_internal_set_output_data(const std::string& value) {
  
  output_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskResponse::set_output_data(std::string&& value) {
  
  output_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TaskResponse.output_data)
}
inline void TaskResponse::set_output_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TaskResponse.output_data)
}
inline void TaskResponse::set_output_data(const char* value,
    size_t size) {
  
  output_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TaskResponse.output_data)
}
inline std::string* TaskResponse::_internal_mutable_output_data() {
  
  return output_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskResponse::release_output_data() {
  // @@protoc_insertion_point(field_release:request_proto.TaskResponse.output_data)
  return output_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskResponse::set_allocated_output_data(std::string* output_data) {
  if (output_data != nullptr) {
    
  } else {
    
  }
  output_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskResponse.output_data)
}

// string cproof = 5;
inline void TaskResponse::clear_cproof() {
  cproof_.ClearToEmpty();
}
inline const std::string& TaskResponse::cproof() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskResponse.cproof)
  return _internal_cproof();
}
inline void TaskResponse::set_cproof(const std::string& value) {
  _internal_set_cproof(value);
  // @@protoc_insertion_point(field_set:request_proto.TaskResponse.cproof)
}
inline std::string* TaskResponse::mutable_cproof() {
  // @@protoc_insertion_point(field_mutable:request_proto.TaskResponse.cproof)
  return _internal_mutable_cproof();
}
inline const std::string& TaskResponse::_internal_cproof() const {
  return cproof_.Get();
}
inline void TaskResponse::_internal_set_cproof(const std::string& value) {
  
  cproof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskResponse::set_cproof(std::string&& value) {
  
  cproof_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TaskResponse.cproof)
}
inline void TaskResponse::set_cproof(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cproof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TaskResponse.cproof)
}
inline void TaskResponse::set_cproof(const char* value,
    size_t size) {
  
  cproof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TaskResponse.cproof)
}
inline std::string* TaskResponse::_internal_mutable_cproof() {
  
  return cproof_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskResponse::release_cproof() {
  // @@protoc_insertion_point(field_release:request_proto.TaskResponse.cproof)
  return cproof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskResponse::set_allocated_cproof(std::string* cproof) {
  if (cproof != nullptr) {
    
  } else {
    
  }
  cproof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cproof,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskResponse.cproof)
}

// bytes signature = 6;
inline void TaskResponse::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& TaskResponse::signature() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskResponse.signature)
  return _internal_signature();
}
inline void TaskResponse::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:request_proto.TaskResponse.signature)
}
inline std::string* TaskResponse::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:request_proto.TaskResponse.signature)
  return _internal_mutable_signature();
}
inline const std::string& TaskResponse::_internal_signature() const {
  return signature_.Get();
}
inline void TaskResponse::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskResponse::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TaskResponse.signature)
}
inline void TaskResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:request_proto.TaskResponse.signature)
}
inline void TaskResponse::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request_proto.TaskResponse.signature)
}
inline std::string* TaskResponse::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskResponse::release_signature() {
  // @@protoc_insertion_point(field_release:request_proto.TaskResponse.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskResponse::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskResponse.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace request_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Regulator_2eproto
