// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgSwapExactAmountIn } from "./types/osmosis/poolmanager/v1beta1/tx";
import { MsgSplitRouteSwapExactAmountIn } from "./types/osmosis/poolmanager/v1beta1/tx";
import { MsgSwapExactAmountOut } from "./types/osmosis/poolmanager/v1beta1/tx";
import { MsgSplitRouteSwapExactAmountOut } from "./types/osmosis/poolmanager/v1beta1/tx";

import { Params as typeParams} from "./types"
import { ModuleRoute as typeModuleRoute} from "./types"
import { SwapAmountInRoute as typeSwapAmountInRoute} from "./types"
import { SwapAmountOutRoute as typeSwapAmountOutRoute} from "./types"
import { SwapAmountInSplitRoute as typeSwapAmountInSplitRoute} from "./types"
import { SwapAmountOutSplitRoute as typeSwapAmountOutSplitRoute} from "./types"

export { MsgSwapExactAmountIn, MsgSplitRouteSwapExactAmountIn, MsgSwapExactAmountOut, MsgSplitRouteSwapExactAmountOut };

type sendMsgSwapExactAmountInParams = {
  value: MsgSwapExactAmountIn,
  fee?: StdFee,
  memo?: string
};

type sendMsgSplitRouteSwapExactAmountInParams = {
  value: MsgSplitRouteSwapExactAmountIn,
  fee?: StdFee,
  memo?: string
};

type sendMsgSwapExactAmountOutParams = {
  value: MsgSwapExactAmountOut,
  fee?: StdFee,
  memo?: string
};

type sendMsgSplitRouteSwapExactAmountOutParams = {
  value: MsgSplitRouteSwapExactAmountOut,
  fee?: StdFee,
  memo?: string
};


type msgSwapExactAmountInParams = {
  value: MsgSwapExactAmountIn,
};

type msgSplitRouteSwapExactAmountInParams = {
  value: MsgSplitRouteSwapExactAmountIn,
};

type msgSwapExactAmountOutParams = {
  value: MsgSwapExactAmountOut,
};

type msgSplitRouteSwapExactAmountOutParams = {
  value: MsgSplitRouteSwapExactAmountOut,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgSwapExactAmountIn({ value, fee, memo }: sendMsgSwapExactAmountInParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSwapExactAmountIn: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSwapExactAmountIn({ value: MsgSwapExactAmountIn.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSwapExactAmountIn: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSplitRouteSwapExactAmountIn({ value, fee, memo }: sendMsgSplitRouteSwapExactAmountInParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSplitRouteSwapExactAmountIn: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSplitRouteSwapExactAmountIn({ value: MsgSplitRouteSwapExactAmountIn.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSplitRouteSwapExactAmountIn: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSwapExactAmountOut({ value, fee, memo }: sendMsgSwapExactAmountOutParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSwapExactAmountOut: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSwapExactAmountOut({ value: MsgSwapExactAmountOut.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSwapExactAmountOut: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSplitRouteSwapExactAmountOut({ value, fee, memo }: sendMsgSplitRouteSwapExactAmountOutParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSplitRouteSwapExactAmountOut: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSplitRouteSwapExactAmountOut({ value: MsgSplitRouteSwapExactAmountOut.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSplitRouteSwapExactAmountOut: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgSwapExactAmountIn({ value }: msgSwapExactAmountInParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.poolmanager.v1beta1.MsgSwapExactAmountIn", value: MsgSwapExactAmountIn.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSwapExactAmountIn: Could not create message: ' + e.message)
			}
		},
		
		msgSplitRouteSwapExactAmountIn({ value }: msgSplitRouteSwapExactAmountInParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.poolmanager.v1beta1.MsgSplitRouteSwapExactAmountIn", value: MsgSplitRouteSwapExactAmountIn.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSplitRouteSwapExactAmountIn: Could not create message: ' + e.message)
			}
		},
		
		msgSwapExactAmountOut({ value }: msgSwapExactAmountOutParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.poolmanager.v1beta1.MsgSwapExactAmountOut", value: MsgSwapExactAmountOut.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSwapExactAmountOut: Could not create message: ' + e.message)
			}
		},
		
		msgSplitRouteSwapExactAmountOut({ value }: msgSplitRouteSwapExactAmountOutParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.poolmanager.v1beta1.MsgSplitRouteSwapExactAmountOut", value: MsgSplitRouteSwapExactAmountOut.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSplitRouteSwapExactAmountOut: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Params: getStructure(typeParams.fromPartial({})),
						ModuleRoute: getStructure(typeModuleRoute.fromPartial({})),
						SwapAmountInRoute: getStructure(typeSwapAmountInRoute.fromPartial({})),
						SwapAmountOutRoute: getStructure(typeSwapAmountOutRoute.fromPartial({})),
						SwapAmountInSplitRoute: getStructure(typeSwapAmountInSplitRoute.fromPartial({})),
						SwapAmountOutSplitRoute: getStructure(typeSwapAmountOutSplitRoute.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			OsmosisPoolmanagerV1Beta1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;