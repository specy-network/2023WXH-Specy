// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";

import { UploadCosmWasmPoolCodeAndWhiteListProposal as typeUploadCosmWasmPoolCodeAndWhiteListProposal} from "./types"
import { MigratePoolContractsProposal as typeMigratePoolContractsProposal} from "./types"
import { InstantiateMsg as typeInstantiateMsg} from "./types"
import { CalcOutAmtGivenIn as typeCalcOutAmtGivenIn} from "./types"
import { CalcOutAmtGivenInRequest as typeCalcOutAmtGivenInRequest} from "./types"
import { CalcOutAmtGivenInResponse as typeCalcOutAmtGivenInResponse} from "./types"
import { CalcInAmtGivenOut as typeCalcInAmtGivenOut} from "./types"
import { CalcInAmtGivenOutRequest as typeCalcInAmtGivenOutRequest} from "./types"
import { CalcInAmtGivenOutResponse as typeCalcInAmtGivenOutResponse} from "./types"
import { SwapExactAmountIn as typeSwapExactAmountIn} from "./types"
import { SwapExactAmountInSudoMsg as typeSwapExactAmountInSudoMsg} from "./types"
import { SwapExactAmountInSudoMsgResponse as typeSwapExactAmountInSudoMsgResponse} from "./types"
import { SwapExactAmountOut as typeSwapExactAmountOut} from "./types"
import { SwapExactAmountOutSudoMsg as typeSwapExactAmountOutSudoMsg} from "./types"
import { SwapExactAmountOutSudoMsgResponse as typeSwapExactAmountOutSudoMsgResponse} from "./types"
import { CosmWasmPool as typeCosmWasmPool} from "./types"
import { GetSwapFeeQueryMsg as typeGetSwapFeeQueryMsg} from "./types"
import { GetSwapFeeQueryMsgResponse as typeGetSwapFeeQueryMsgResponse} from "./types"
import { SpotPrice as typeSpotPrice} from "./types"
import { SpotPriceQueryMsg as typeSpotPriceQueryMsg} from "./types"
import { SpotPriceQueryMsgResponse as typeSpotPriceQueryMsgResponse} from "./types"
import { EmptyStruct as typeEmptyStruct} from "./types"
import { GetTotalPoolLiquidityQueryMsg as typeGetTotalPoolLiquidityQueryMsg} from "./types"
import { GetTotalPoolLiquidityQueryMsgResponse as typeGetTotalPoolLiquidityQueryMsgResponse} from "./types"
import { GetTotalSharesQueryMsg as typeGetTotalSharesQueryMsg} from "./types"
import { GetTotalSharesQueryMsgResponse as typeGetTotalSharesQueryMsgResponse} from "./types"
import { EmptyRequest as typeEmptyRequest} from "./types"
import { JoinPoolExecuteMsgRequest as typeJoinPoolExecuteMsgRequest} from "./types"
import { JoinPoolExecuteMsgResponse as typeJoinPoolExecuteMsgResponse} from "./types"
import { ExitPoolExecuteMsgRequest as typeExitPoolExecuteMsgRequest} from "./types"
import { ExitPoolExecuteMsgResponse as typeExitPoolExecuteMsgResponse} from "./types"
import { Params as typeParams} from "./types"

export {  };



export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						UploadCosmWasmPoolCodeAndWhiteListProposal: getStructure(typeUploadCosmWasmPoolCodeAndWhiteListProposal.fromPartial({})),
						MigratePoolContractsProposal: getStructure(typeMigratePoolContractsProposal.fromPartial({})),
						InstantiateMsg: getStructure(typeInstantiateMsg.fromPartial({})),
						CalcOutAmtGivenIn: getStructure(typeCalcOutAmtGivenIn.fromPartial({})),
						CalcOutAmtGivenInRequest: getStructure(typeCalcOutAmtGivenInRequest.fromPartial({})),
						CalcOutAmtGivenInResponse: getStructure(typeCalcOutAmtGivenInResponse.fromPartial({})),
						CalcInAmtGivenOut: getStructure(typeCalcInAmtGivenOut.fromPartial({})),
						CalcInAmtGivenOutRequest: getStructure(typeCalcInAmtGivenOutRequest.fromPartial({})),
						CalcInAmtGivenOutResponse: getStructure(typeCalcInAmtGivenOutResponse.fromPartial({})),
						SwapExactAmountIn: getStructure(typeSwapExactAmountIn.fromPartial({})),
						SwapExactAmountInSudoMsg: getStructure(typeSwapExactAmountInSudoMsg.fromPartial({})),
						SwapExactAmountInSudoMsgResponse: getStructure(typeSwapExactAmountInSudoMsgResponse.fromPartial({})),
						SwapExactAmountOut: getStructure(typeSwapExactAmountOut.fromPartial({})),
						SwapExactAmountOutSudoMsg: getStructure(typeSwapExactAmountOutSudoMsg.fromPartial({})),
						SwapExactAmountOutSudoMsgResponse: getStructure(typeSwapExactAmountOutSudoMsgResponse.fromPartial({})),
						CosmWasmPool: getStructure(typeCosmWasmPool.fromPartial({})),
						GetSwapFeeQueryMsg: getStructure(typeGetSwapFeeQueryMsg.fromPartial({})),
						GetSwapFeeQueryMsgResponse: getStructure(typeGetSwapFeeQueryMsgResponse.fromPartial({})),
						SpotPrice: getStructure(typeSpotPrice.fromPartial({})),
						SpotPriceQueryMsg: getStructure(typeSpotPriceQueryMsg.fromPartial({})),
						SpotPriceQueryMsgResponse: getStructure(typeSpotPriceQueryMsgResponse.fromPartial({})),
						EmptyStruct: getStructure(typeEmptyStruct.fromPartial({})),
						GetTotalPoolLiquidityQueryMsg: getStructure(typeGetTotalPoolLiquidityQueryMsg.fromPartial({})),
						GetTotalPoolLiquidityQueryMsgResponse: getStructure(typeGetTotalPoolLiquidityQueryMsgResponse.fromPartial({})),
						GetTotalSharesQueryMsg: getStructure(typeGetTotalSharesQueryMsg.fromPartial({})),
						GetTotalSharesQueryMsgResponse: getStructure(typeGetTotalSharesQueryMsgResponse.fromPartial({})),
						EmptyRequest: getStructure(typeEmptyRequest.fromPartial({})),
						JoinPoolExecuteMsgRequest: getStructure(typeJoinPoolExecuteMsgRequest.fromPartial({})),
						JoinPoolExecuteMsgResponse: getStructure(typeJoinPoolExecuteMsgResponse.fromPartial({})),
						ExitPoolExecuteMsgRequest: getStructure(typeExitPoolExecuteMsgRequest.fromPartial({})),
						ExitPoolExecuteMsgResponse: getStructure(typeExitPoolExecuteMsgResponse.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			OsmosisCosmwasmpoolV1Beta1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;