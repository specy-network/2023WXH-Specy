// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgSetBaseDenoms } from "./types/osmosis/protorev/v1beta1/tx";
import { MsgSetDeveloperAccount } from "./types/osmosis/protorev/v1beta1/tx";
import { MsgSetMaxPoolPointsPerBlock } from "./types/osmosis/protorev/v1beta1/tx";
import { MsgSetMaxPoolPointsPerTx } from "./types/osmosis/protorev/v1beta1/tx";
import { MsgSetPoolWeights } from "./types/osmosis/protorev/v1beta1/tx";
import { MsgSetHotRoutes } from "./types/osmosis/protorev/v1beta1/tx";

import { SetProtoRevEnabledProposal as typeSetProtoRevEnabledProposal} from "./types"
import { SetProtoRevAdminAccountProposal as typeSetProtoRevAdminAccountProposal} from "./types"
import { Params as typeParams} from "./types"
import { TokenPairArbRoutes as typeTokenPairArbRoutes} from "./types"
import { Route as typeRoute} from "./types"
import { Trade as typeTrade} from "./types"
import { RouteStatistics as typeRouteStatistics} from "./types"
import { PoolWeights as typePoolWeights} from "./types"
import { BaseDenom as typeBaseDenom} from "./types"

export { MsgSetBaseDenoms, MsgSetDeveloperAccount, MsgSetMaxPoolPointsPerBlock, MsgSetMaxPoolPointsPerTx, MsgSetPoolWeights, MsgSetHotRoutes };

type sendMsgSetBaseDenomsParams = {
  value: MsgSetBaseDenoms,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetDeveloperAccountParams = {
  value: MsgSetDeveloperAccount,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetMaxPoolPointsPerBlockParams = {
  value: MsgSetMaxPoolPointsPerBlock,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetMaxPoolPointsPerTxParams = {
  value: MsgSetMaxPoolPointsPerTx,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetPoolWeightsParams = {
  value: MsgSetPoolWeights,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetHotRoutesParams = {
  value: MsgSetHotRoutes,
  fee?: StdFee,
  memo?: string
};


type msgSetBaseDenomsParams = {
  value: MsgSetBaseDenoms,
};

type msgSetDeveloperAccountParams = {
  value: MsgSetDeveloperAccount,
};

type msgSetMaxPoolPointsPerBlockParams = {
  value: MsgSetMaxPoolPointsPerBlock,
};

type msgSetMaxPoolPointsPerTxParams = {
  value: MsgSetMaxPoolPointsPerTx,
};

type msgSetPoolWeightsParams = {
  value: MsgSetPoolWeights,
};

type msgSetHotRoutesParams = {
  value: MsgSetHotRoutes,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgSetBaseDenoms({ value, fee, memo }: sendMsgSetBaseDenomsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetBaseDenoms: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSetBaseDenoms({ value: MsgSetBaseDenoms.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetBaseDenoms: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetDeveloperAccount({ value, fee, memo }: sendMsgSetDeveloperAccountParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetDeveloperAccount: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSetDeveloperAccount({ value: MsgSetDeveloperAccount.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetDeveloperAccount: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetMaxPoolPointsPerBlock({ value, fee, memo }: sendMsgSetMaxPoolPointsPerBlockParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetMaxPoolPointsPerBlock: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSetMaxPoolPointsPerBlock({ value: MsgSetMaxPoolPointsPerBlock.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetMaxPoolPointsPerBlock: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetMaxPoolPointsPerTx({ value, fee, memo }: sendMsgSetMaxPoolPointsPerTxParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetMaxPoolPointsPerTx: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSetMaxPoolPointsPerTx({ value: MsgSetMaxPoolPointsPerTx.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetMaxPoolPointsPerTx: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetPoolWeights({ value, fee, memo }: sendMsgSetPoolWeightsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetPoolWeights: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSetPoolWeights({ value: MsgSetPoolWeights.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetPoolWeights: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetHotRoutes({ value, fee, memo }: sendMsgSetHotRoutesParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetHotRoutes: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSetHotRoutes({ value: MsgSetHotRoutes.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetHotRoutes: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgSetBaseDenoms({ value }: msgSetBaseDenomsParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.protorev.v1beta1.MsgSetBaseDenoms", value: MsgSetBaseDenoms.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetBaseDenoms: Could not create message: ' + e.message)
			}
		},
		
		msgSetDeveloperAccount({ value }: msgSetDeveloperAccountParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.protorev.v1beta1.MsgSetDeveloperAccount", value: MsgSetDeveloperAccount.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetDeveloperAccount: Could not create message: ' + e.message)
			}
		},
		
		msgSetMaxPoolPointsPerBlock({ value }: msgSetMaxPoolPointsPerBlockParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlock", value: MsgSetMaxPoolPointsPerBlock.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetMaxPoolPointsPerBlock: Could not create message: ' + e.message)
			}
		},
		
		msgSetMaxPoolPointsPerTx({ value }: msgSetMaxPoolPointsPerTxParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTx", value: MsgSetMaxPoolPointsPerTx.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetMaxPoolPointsPerTx: Could not create message: ' + e.message)
			}
		},
		
		msgSetPoolWeights({ value }: msgSetPoolWeightsParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.protorev.v1beta1.MsgSetPoolWeights", value: MsgSetPoolWeights.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetPoolWeights: Could not create message: ' + e.message)
			}
		},
		
		msgSetHotRoutes({ value }: msgSetHotRoutesParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.protorev.v1beta1.MsgSetHotRoutes", value: MsgSetHotRoutes.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetHotRoutes: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						SetProtoRevEnabledProposal: getStructure(typeSetProtoRevEnabledProposal.fromPartial({})),
						SetProtoRevAdminAccountProposal: getStructure(typeSetProtoRevAdminAccountProposal.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						TokenPairArbRoutes: getStructure(typeTokenPairArbRoutes.fromPartial({})),
						Route: getStructure(typeRoute.fromPartial({})),
						Trade: getStructure(typeTrade.fromPartial({})),
						RouteStatistics: getStructure(typeRouteStatistics.fromPartial({})),
						PoolWeights: getStructure(typePoolWeights.fromPartial({})),
						BaseDenom: getStructure(typeBaseDenom.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			OsmosisProtorevV1Beta1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;