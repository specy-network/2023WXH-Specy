// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";

import { ReplacePoolIncentivesProposal as typeReplacePoolIncentivesProposal} from "./types"
import { UpdatePoolIncentivesProposal as typeUpdatePoolIncentivesProposal} from "./types"
import { Params as typeParams} from "./types"
import { LockableDurationsInfo as typeLockableDurationsInfo} from "./types"
import { DistrInfo as typeDistrInfo} from "./types"
import { DistrRecord as typeDistrRecord} from "./types"
import { PoolToGauge as typePoolToGauge} from "./types"
import { PoolToGauges as typePoolToGauges} from "./types"
import { QueryGaugeIdsResponse_GaugeIdWithDuration as typeQueryGaugeIdsResponse_GaugeIdWithDuration} from "./types"
import { IncentivizedPool as typeIncentivizedPool} from "./types"
import { MigrationRecords as typeMigrationRecords} from "./types"
import { BalancerToConcentratedPoolLink as typeBalancerToConcentratedPoolLink} from "./types"

export {  };



export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						ReplacePoolIncentivesProposal: getStructure(typeReplacePoolIncentivesProposal.fromPartial({})),
						UpdatePoolIncentivesProposal: getStructure(typeUpdatePoolIncentivesProposal.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						LockableDurationsInfo: getStructure(typeLockableDurationsInfo.fromPartial({})),
						DistrInfo: getStructure(typeDistrInfo.fromPartial({})),
						DistrRecord: getStructure(typeDistrRecord.fromPartial({})),
						PoolToGauge: getStructure(typePoolToGauge.fromPartial({})),
						PoolToGauges: getStructure(typePoolToGauges.fromPartial({})),
						QueryGaugeIdsResponse_GaugeIdWithDuration: getStructure(typeQueryGaugeIdsResponse_GaugeIdWithDuration.fromPartial({})),
						IncentivizedPool: getStructure(typeIncentivizedPool.fromPartial({})),
						MigrationRecords: getStructure(typeMigrationRecords.fromPartial({})),
						BalancerToConcentratedPoolLink: getStructure(typeBalancerToConcentratedPoolLink.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			OsmosisPoolincentivesV1Beta1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;