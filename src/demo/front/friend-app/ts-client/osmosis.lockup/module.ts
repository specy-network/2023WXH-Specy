// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgExtendLockup } from "./types/osmosis/lockup/tx";
import { MsgLockTokens } from "./types/osmosis/lockup/tx";
import { MsgBeginUnlocking } from "./types/osmosis/lockup/tx";
import { MsgBeginUnlockingAll } from "./types/osmosis/lockup/tx";
import { MsgForceUnlock } from "./types/osmosis/lockup/tx";
import { MsgSetRewardReceiverAddress } from "./types/osmosis/lockup/tx";

import { PeriodLock as typePeriodLock} from "./types"
import { QueryCondition as typeQueryCondition} from "./types"
import { SyntheticLock as typeSyntheticLock} from "./types"
import { Params as typeParams} from "./types"

export { MsgExtendLockup, MsgLockTokens, MsgBeginUnlocking, MsgBeginUnlockingAll, MsgForceUnlock, MsgSetRewardReceiverAddress };

type sendMsgExtendLockupParams = {
  value: MsgExtendLockup,
  fee?: StdFee,
  memo?: string
};

type sendMsgLockTokensParams = {
  value: MsgLockTokens,
  fee?: StdFee,
  memo?: string
};

type sendMsgBeginUnlockingParams = {
  value: MsgBeginUnlocking,
  fee?: StdFee,
  memo?: string
};

type sendMsgBeginUnlockingAllParams = {
  value: MsgBeginUnlockingAll,
  fee?: StdFee,
  memo?: string
};

type sendMsgForceUnlockParams = {
  value: MsgForceUnlock,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetRewardReceiverAddressParams = {
  value: MsgSetRewardReceiverAddress,
  fee?: StdFee,
  memo?: string
};


type msgExtendLockupParams = {
  value: MsgExtendLockup,
};

type msgLockTokensParams = {
  value: MsgLockTokens,
};

type msgBeginUnlockingParams = {
  value: MsgBeginUnlocking,
};

type msgBeginUnlockingAllParams = {
  value: MsgBeginUnlockingAll,
};

type msgForceUnlockParams = {
  value: MsgForceUnlock,
};

type msgSetRewardReceiverAddressParams = {
  value: MsgSetRewardReceiverAddress,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgExtendLockup({ value, fee, memo }: sendMsgExtendLockupParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgExtendLockup: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgExtendLockup({ value: MsgExtendLockup.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgExtendLockup: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgLockTokens({ value, fee, memo }: sendMsgLockTokensParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgLockTokens: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgLockTokens({ value: MsgLockTokens.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgLockTokens: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBeginUnlocking({ value, fee, memo }: sendMsgBeginUnlockingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBeginUnlocking: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgBeginUnlocking({ value: MsgBeginUnlocking.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBeginUnlocking: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBeginUnlockingAll({ value, fee, memo }: sendMsgBeginUnlockingAllParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBeginUnlockingAll: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgBeginUnlockingAll({ value: MsgBeginUnlockingAll.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBeginUnlockingAll: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgForceUnlock({ value, fee, memo }: sendMsgForceUnlockParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgForceUnlock: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgForceUnlock({ value: MsgForceUnlock.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgForceUnlock: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetRewardReceiverAddress({ value, fee, memo }: sendMsgSetRewardReceiverAddressParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetRewardReceiverAddress: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSetRewardReceiverAddress({ value: MsgSetRewardReceiverAddress.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetRewardReceiverAddress: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgExtendLockup({ value }: msgExtendLockupParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.lockup.MsgExtendLockup", value: MsgExtendLockup.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgExtendLockup: Could not create message: ' + e.message)
			}
		},
		
		msgLockTokens({ value }: msgLockTokensParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.lockup.MsgLockTokens", value: MsgLockTokens.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgLockTokens: Could not create message: ' + e.message)
			}
		},
		
		msgBeginUnlocking({ value }: msgBeginUnlockingParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.lockup.MsgBeginUnlocking", value: MsgBeginUnlocking.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBeginUnlocking: Could not create message: ' + e.message)
			}
		},
		
		msgBeginUnlockingAll({ value }: msgBeginUnlockingAllParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.lockup.MsgBeginUnlockingAll", value: MsgBeginUnlockingAll.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBeginUnlockingAll: Could not create message: ' + e.message)
			}
		},
		
		msgForceUnlock({ value }: msgForceUnlockParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.lockup.MsgForceUnlock", value: MsgForceUnlock.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgForceUnlock: Could not create message: ' + e.message)
			}
		},
		
		msgSetRewardReceiverAddress({ value }: msgSetRewardReceiverAddressParams): EncodeObject {
			try {
				return { typeUrl: "/osmosis.lockup.MsgSetRewardReceiverAddress", value: MsgSetRewardReceiverAddress.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetRewardReceiverAddress: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						PeriodLock: getStructure(typePeriodLock.fromPartial({})),
						QueryCondition: getStructure(typeQueryCondition.fromPartial({})),
						SyntheticLock: getStructure(typeSyntheticLock.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			OsmosisLockup: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;