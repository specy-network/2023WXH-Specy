// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgEditTask } from "./types/specy/specy/tx";
import { MsgExecuteTask } from "./types/specy/specy/tx";
import { MsgWithdrawBalance } from "./types/specy/specy/tx";
import { MsgCancelExecutor } from "./types/specy/specy/tx";
import { MsgEditExecutor } from "./types/specy/specy/tx";
import { MsgCancelTask } from "./types/specy/specy/tx";
import { MsgDepositBalance } from "./types/specy/specy/tx";
import { MsgCreateExecutor } from "./types/specy/specy/tx";
import { MsgCreateTask } from "./types/specy/specy/tx";

import { Condition as typeCondition} from "./types"
import { CurrentExecutorStatus as typeCurrentExecutorStatus} from "./types"
import { Deposit as typeDeposit} from "./types"
import { ExecuteRecord as typeExecuteRecord} from "./types"
import { Executor as typeExecutor} from "./types"
import { HistoryExecuteCount as typeHistoryExecuteCount} from "./types"
import { Params as typeParams} from "./types"
import { Task as typeTask} from "./types"

export { MsgEditTask, MsgExecuteTask, MsgWithdrawBalance, MsgCancelExecutor, MsgEditExecutor, MsgCancelTask, MsgDepositBalance, MsgCreateExecutor, MsgCreateTask };

type sendMsgEditTaskParams = {
  value: MsgEditTask,
  fee?: StdFee,
  memo?: string
};

type sendMsgExecuteTaskParams = {
  value: MsgExecuteTask,
  fee?: StdFee,
  memo?: string
};

type sendMsgWithdrawBalanceParams = {
  value: MsgWithdrawBalance,
  fee?: StdFee,
  memo?: string
};

type sendMsgCancelExecutorParams = {
  value: MsgCancelExecutor,
  fee?: StdFee,
  memo?: string
};

type sendMsgEditExecutorParams = {
  value: MsgEditExecutor,
  fee?: StdFee,
  memo?: string
};

type sendMsgCancelTaskParams = {
  value: MsgCancelTask,
  fee?: StdFee,
  memo?: string
};

type sendMsgDepositBalanceParams = {
  value: MsgDepositBalance,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateExecutorParams = {
  value: MsgCreateExecutor,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTaskParams = {
  value: MsgCreateTask,
  fee?: StdFee,
  memo?: string
};


type msgEditTaskParams = {
  value: MsgEditTask,
};

type msgExecuteTaskParams = {
  value: MsgExecuteTask,
};

type msgWithdrawBalanceParams = {
  value: MsgWithdrawBalance,
};

type msgCancelExecutorParams = {
  value: MsgCancelExecutor,
};

type msgEditExecutorParams = {
  value: MsgEditExecutor,
};

type msgCancelTaskParams = {
  value: MsgCancelTask,
};

type msgDepositBalanceParams = {
  value: MsgDepositBalance,
};

type msgCreateExecutorParams = {
  value: MsgCreateExecutor,
};

type msgCreateTaskParams = {
  value: MsgCreateTask,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgEditTask({ value, fee, memo }: sendMsgEditTaskParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgEditTask: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgEditTask({ value: MsgEditTask.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgEditTask: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgExecuteTask({ value, fee, memo }: sendMsgExecuteTaskParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgExecuteTask: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgExecuteTask({ value: MsgExecuteTask.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgExecuteTask: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgWithdrawBalance({ value, fee, memo }: sendMsgWithdrawBalanceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgWithdrawBalance: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgWithdrawBalance({ value: MsgWithdrawBalance.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgWithdrawBalance: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCancelExecutor({ value, fee, memo }: sendMsgCancelExecutorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCancelExecutor: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCancelExecutor({ value: MsgCancelExecutor.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCancelExecutor: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgEditExecutor({ value, fee, memo }: sendMsgEditExecutorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgEditExecutor: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgEditExecutor({ value: MsgEditExecutor.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgEditExecutor: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCancelTask({ value, fee, memo }: sendMsgCancelTaskParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCancelTask: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCancelTask({ value: MsgCancelTask.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCancelTask: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDepositBalance({ value, fee, memo }: sendMsgDepositBalanceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDepositBalance: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDepositBalance({ value: MsgDepositBalance.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDepositBalance: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateExecutor({ value, fee, memo }: sendMsgCreateExecutorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateExecutor: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateExecutor({ value: MsgCreateExecutor.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateExecutor: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTask({ value, fee, memo }: sendMsgCreateTaskParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTask: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateTask({ value: MsgCreateTask.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTask: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgEditTask({ value }: msgEditTaskParams): EncodeObject {
			try {
				return { typeUrl: "/specynetwork.specy.specy.MsgEditTask", value: MsgEditTask.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgEditTask: Could not create message: ' + e.message)
			}
		},
		
		msgExecuteTask({ value }: msgExecuteTaskParams): EncodeObject {
			try {
				return { typeUrl: "/specynetwork.specy.specy.MsgExecuteTask", value: MsgExecuteTask.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgExecuteTask: Could not create message: ' + e.message)
			}
		},
		
		msgWithdrawBalance({ value }: msgWithdrawBalanceParams): EncodeObject {
			try {
				return { typeUrl: "/specynetwork.specy.specy.MsgWithdrawBalance", value: MsgWithdrawBalance.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgWithdrawBalance: Could not create message: ' + e.message)
			}
		},
		
		msgCancelExecutor({ value }: msgCancelExecutorParams): EncodeObject {
			try {
				return { typeUrl: "/specynetwork.specy.specy.MsgCancelExecutor", value: MsgCancelExecutor.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCancelExecutor: Could not create message: ' + e.message)
			}
		},
		
		msgEditExecutor({ value }: msgEditExecutorParams): EncodeObject {
			try {
				return { typeUrl: "/specynetwork.specy.specy.MsgEditExecutor", value: MsgEditExecutor.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgEditExecutor: Could not create message: ' + e.message)
			}
		},
		
		msgCancelTask({ value }: msgCancelTaskParams): EncodeObject {
			try {
				return { typeUrl: "/specynetwork.specy.specy.MsgCancelTask", value: MsgCancelTask.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCancelTask: Could not create message: ' + e.message)
			}
		},
		
		msgDepositBalance({ value }: msgDepositBalanceParams): EncodeObject {
			try {
				return { typeUrl: "/specynetwork.specy.specy.MsgDepositBalance", value: MsgDepositBalance.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDepositBalance: Could not create message: ' + e.message)
			}
		},
		
		msgCreateExecutor({ value }: msgCreateExecutorParams): EncodeObject {
			try {
				return { typeUrl: "/specynetwork.specy.specy.MsgCreateExecutor", value: MsgCreateExecutor.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateExecutor: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTask({ value }: msgCreateTaskParams): EncodeObject {
			try {
				return { typeUrl: "/specynetwork.specy.specy.MsgCreateTask", value: MsgCreateTask.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTask: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Condition: getStructure(typeCondition.fromPartial({})),
						CurrentExecutorStatus: getStructure(typeCurrentExecutorStatus.fromPartial({})),
						Deposit: getStructure(typeDeposit.fromPartial({})),
						ExecuteRecord: getStructure(typeExecuteRecord.fromPartial({})),
						Executor: getStructure(typeExecutor.fromPartial({})),
						HistoryExecuteCount: getStructure(typeHistoryExecuteCount.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						Task: getStructure(typeTask.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			SpecynetworkSpecySpecy: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;