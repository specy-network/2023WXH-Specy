// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: specy/specy/execute_record.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExecuteRecord struct {
	Owner     string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Position  uint64 `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Executor  string `protobuf:"bytes,4,opt,name=executor,proto3" json:"executor,omitempty"`
	Timestamp uint64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TxHash    string `protobuf:"bytes,6,opt,name=txHash,proto3" json:"txHash,omitempty"`
	Amount    uint64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *ExecuteRecord) Reset()         { *m = ExecuteRecord{} }
func (m *ExecuteRecord) String() string { return proto.CompactTextString(m) }
func (*ExecuteRecord) ProtoMessage()    {}
func (*ExecuteRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_96081019ae90c44f, []int{0}
}
func (m *ExecuteRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteRecord.Merge(m, src)
}
func (m *ExecuteRecord) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteRecord proto.InternalMessageInfo

func (m *ExecuteRecord) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ExecuteRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExecuteRecord) GetPosition() uint64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *ExecuteRecord) GetExecutor() string {
	if m != nil {
		return m.Executor
	}
	return ""
}

func (m *ExecuteRecord) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ExecuteRecord) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *ExecuteRecord) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*ExecuteRecord)(nil), "specynetwork.specy.specy.ExecuteRecord")
}

func init() { proto.RegisterFile("specy/specy/execute_record.proto", fileDescriptor_96081019ae90c44f) }

var fileDescriptor_96081019ae90c44f = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x37, 0xda, 0xad, 0x6e, 0xc0, 0x4b, 0x10, 0x09, 0x22, 0xa1, 0x78, 0xda, 0x83, 0xd6,
	0x83, 0x6f, 0x20, 0x28, 0x9e, 0x7b, 0xf4, 0x22, 0xdd, 0x3a, 0xb8, 0x45, 0x9a, 0x09, 0xc9, 0x94,
	0xed, 0xbe, 0x85, 0x6f, 0xe4, 0xd5, 0xe3, 0x1e, 0x3d, 0x4a, 0xfb, 0x22, 0xb2, 0x93, 0xb0, 0x5e,
	0x26, 0xf9, 0xfe, 0xe1, 0x83, 0xe1, 0x97, 0x45, 0x70, 0xd0, 0x6c, 0xef, 0xe2, 0x84, 0x01, 0x9a,
	0x9e, 0xe0, 0xd5, 0x43, 0x83, 0xfe, 0xad, 0x74, 0x1e, 0x09, 0x95, 0xe6, 0x9d, 0x05, 0xda, 0xa0,
	0xff, 0x28, 0x19, 0xe2, 0xbc, 0xfe, 0x12, 0xf2, 0xec, 0x31, 0x2a, 0x15, 0x1b, 0xea, 0x5c, 0xce,
	0x71, 0x63, 0xc1, 0x6b, 0x51, 0x88, 0xe5, 0xa2, 0x8a, 0xa0, 0x94, 0xcc, 0x6c, 0xdd, 0x81, 0x3e,
	0xe2, 0x90, 0xff, 0xea, 0x52, 0x9e, 0x3a, 0x0c, 0x2d, 0xb5, 0x68, 0xf5, 0x71, 0x21, 0x96, 0x59,
	0x75, 0xe0, 0xfd, 0x2e, 0x5e, 0x82, 0x5e, 0x67, 0xec, 0x1c, 0x58, 0x5d, 0xc9, 0x05, 0xb5, 0x1d,
	0x04, 0xaa, 0x3b, 0xa7, 0xe7, 0x2c, 0xfe, 0x07, 0xea, 0x42, 0xe6, 0x34, 0x3c, 0xd7, 0x61, 0xad,
	0x73, 0xf6, 0x12, 0xed, 0xf3, 0xba, 0xc3, 0xde, 0x92, 0x3e, 0x61, 0x25, 0xd1, 0xc3, 0xd3, 0xf7,
	0x68, 0xc4, 0x6e, 0x34, 0xe2, 0x77, 0x34, 0xe2, 0x73, 0x32, 0xb3, 0xdd, 0x64, 0x66, 0x3f, 0x93,
	0x99, 0xbd, 0xdc, 0xbc, 0xb7, 0xb4, 0xee, 0x57, 0x65, 0x83, 0x5d, 0x2c, 0xe7, 0x36, 0x35, 0x90,
	0xaa, 0x1a, 0xd2, 0x4b, 0x5b, 0x07, 0x61, 0x95, 0x73, 0x55, 0xf7, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x87, 0x64, 0x79, 0xe4, 0x4e, 0x01, 0x00, 0x00,
}

func (m *ExecuteRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintExecuteRecord(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintExecuteRecord(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Timestamp != 0 {
		i = encodeVarintExecuteRecord(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintExecuteRecord(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0x22
	}
	if m.Position != 0 {
		i = encodeVarintExecuteRecord(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExecuteRecord(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintExecuteRecord(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExecuteRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovExecuteRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExecuteRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovExecuteRecord(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExecuteRecord(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovExecuteRecord(uint64(m.Position))
	}
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovExecuteRecord(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovExecuteRecord(uint64(m.Timestamp))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovExecuteRecord(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovExecuteRecord(uint64(m.Amount))
	}
	return n
}

func sovExecuteRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExecuteRecord(x uint64) (n int) {
	return sovExecuteRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExecuteRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecuteRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecuteRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecuteRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecuteRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecuteRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecuteRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecuteRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecuteRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecuteRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecuteRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecuteRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecuteRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecuteRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecuteRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecuteRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecuteRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExecuteRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecuteRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExecuteRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExecuteRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecuteRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecuteRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExecuteRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExecuteRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExecuteRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExecuteRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExecuteRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExecuteRecord = fmt.Errorf("proto: unexpected end of group")
)
