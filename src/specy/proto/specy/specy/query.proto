syntax = "proto3";

package specynetwork.specy.specy;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "specy/specy/params.proto";
import "specy/specy/task.proto";
import "specy/specy/condition.proto";
import "specy/specy/executor.proto";
import "specy/specy/deposit.proto";
import "cosmos/base/v1beta1/coin.proto";
import "specy/specy/current_executor_status.proto";
import "specy/specy/history_execute_count.proto";
import "specy/specy/execute_record.proto";

option go_package = "github.com/specy-network/specy/x/specy/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/params";
  
  }
  
  // Queries a list of Task items.
  rpc Task    (QueryGetTaskRequest) returns (QueryGetTaskResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/task/{owner}/{name}";
  
  }
  rpc TaskAll (QueryAllTaskRequest) returns (QueryAllTaskResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/task";
  
  }
  
  // Queries a list of Executor items.
  rpc Executor    (QueryGetExecutorRequest) returns (QueryGetExecutorResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/executor/{address}";
  
  }
  rpc ExecutorAll (QueryAllExecutorRequest) returns (QueryAllExecutorResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/executor";
  
  }
  
  // Queries a list of Deposit items.
  rpc Deposit    (QueryGetDepositRequest) returns (QueryGetDepositResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/deposit/{address}";
  
  }
  rpc DepositAll (QueryAllDepositRequest) returns (QueryAllDepositResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/deposit";
  
  }
  
  // Queries a CurrentExecutorStatus by index.
  rpc CurrentExecutorStatus (QueryGetCurrentExecutorStatusRequest) returns (QueryGetCurrentExecutorStatusResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/current_executor_status";
  
  }
  
  // Queries a list of Pool items.
  rpc Pool (QueryPoolRequest) returns (QueryPoolResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/pool";
  
  }
  
  // Queries a list of TaskAllByOwner items.
  rpc TaskAllByOwner (QueryTaskAllByOwnerRequest) returns (QueryTaskAllByOwnerResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/task_all_by_owner/{owner}";
  
  }
  
  // Queries a HistoryExecuteCount by index.
  rpc HistoryExecuteCount (QueryGetHistoryExecuteCountRequest) returns (QueryGetHistoryExecuteCountResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/history_execute_count";
  
  }
  
  // Queries a list of ExecuteRecord items.
  rpc ExecuteRecord    (QueryGetExecuteRecordRequest) returns (QueryGetExecuteRecordResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/execute_record/{owner}/{name}/{position}";
  
  }
  rpc ExecuteRecordAll (QueryAllExecuteRecordRequest) returns (QueryAllExecuteRecordResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/execute_record";
  
  }
  
  // Queries a list of ExecuteRecordAllByOwnerAndName items.
  rpc ExecuteRecordAllByOwnerAndName (QueryExecuteRecordAllByOwnerAndNameRequest) returns (QueryExecuteRecordAllByOwnerAndNameResponse) {
    option (google.api.http).get = "/specy-network/specy/specy/execute_record_all_by_owner_and_name/{owner}/{name}";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetTaskRequest {
  string owner = 1;
  string name  = 2;
}

message QueryGetTaskResponse {
  Task task = 1 [(gogoproto.nullable) = false];
}

message QueryAllTaskRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTaskResponse {
  repeated Task                                   task       = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetExecutorRequest {
  string address = 1;
}

message QueryGetExecutorResponse {
  Executor executor = 1 [(gogoproto.nullable) = false];
}

message QueryAllExecutorRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllExecutorResponse {
  repeated Executor                               executor   = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetDepositRequest {
  string address = 1;
}

message QueryGetDepositResponse {
  Deposit deposit = 1 [(gogoproto.nullable) = false];
}

message QueryAllDepositRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDepositResponse {
  repeated Deposit                                deposit    = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCurrentExecutorStatusRequest {}

message QueryGetCurrentExecutorStatusResponse {
  CurrentExecutorStatus CurrentExecutorStatus = 1 [(gogoproto.nullable) = false];
}

message QueryPoolRequest {}

message QueryPoolResponse {
  cosmos.base.v1beta1.Coin totalDeposit  = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin currentReward = 2 [(gogoproto.nullable) = false];
}

message QueryTaskAllByOwnerRequest {
  string owner = 1;
}

message QueryTaskAllByOwnerResponse {
  repeated Task tasks = 1 [(gogoproto.nullable) = false];
}

message QueryGetHistoryExecuteCountRequest {}

message QueryGetHistoryExecuteCountResponse {
  HistoryExecuteCount HistoryExecuteCount = 1 [(gogoproto.nullable) = false];
}

message QueryGetExecuteRecordRequest {
  string owner    = 1;
  string name     = 2;
  uint64 position = 3;
}

message QueryGetExecuteRecordResponse {
  ExecuteRecord executeRecord = 1 [(gogoproto.nullable) = false];
}

message QueryAllExecuteRecordRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllExecuteRecordResponse {
  repeated ExecuteRecord                          executeRecord = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination    = 2;
}

message QueryExecuteRecordAllByOwnerAndNameRequest {
  string owner = 1;
  string name  = 2;
}

message QueryExecuteRecordAllByOwnerAndNameResponse {
  repeated ExecuteRecord records = 1 [(gogoproto.nullable) = false];
}

